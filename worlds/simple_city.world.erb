<?xml version="1.0" ?>

<%
  # Simple city

  # Actors
  mesh_path = "model://actor/meshes/"

  skins =
  [
    "SKIN_man_blue_shirt.dae",
    "SKIN_man_green_shirt.dae",
    "SKIN_man_red_shirt.dae"
  ]

  animations =
  [
    "ANIMATION_running.dae",
    "ANIMATION_talking_a.dae",
    "ANIMATION_talking_b.dae",
    "ANIMATION_walking.dae"
  ]

  # From a rectangle (min, max)
  def trajectory(traj, speed, start)
    minX = traj[:minX]
    minY = traj[:minY]
    maxX = traj[:maxX]
    maxY = traj[:maxY]

    # Orientation
    plusX = 0
    minusX = Math::PI
    plusY = Math::PI*0.5
    minusY = -Math::PI*0.5

    margin = 5
    turn = 10

    # Time
    edgeX_length = maxX - minX - margin*2.0 - turn*2.0
    edgeX_time = edgeX_length / speed

    edgeY_length = maxY - minY - margin*2.0 - turn*2.0
    edgeY_time = edgeY_length / speed

    turn_time = (turn*2) / speed

    # poses starting from min
    allPoses =
    [
      {:x => minX + margin,        :y => minY + margin + turn, :yaw => plusY},
      {:x => minX + margin,        :y => maxY - margin - turn, :yaw => plusY},
      {:x => minX + margin + turn, :y => maxY - margin,        :yaw => plusX},
      {:x => maxX - margin - turn, :y => maxY - margin,        :yaw => plusX},
      {:x => maxX - margin,        :y => maxY - margin - turn, :yaw => minusY},
      {:x => maxX - margin,        :y => minY + margin + turn, :yaw => minusY},
      {:x => maxX - margin - turn, :y => minY + margin,        :yaw => minusX},
      {:x => minX + margin + turn, :y => minY + margin,        :yaw => minusX},
      {:x => minX + margin,        :y => minY + margin + turn, :yaw => plusY},
    ]

    trajectory = Array.new

    time = 0.0
    current = start
    for i in 0..8
      if current == start
        time = 0.0
      elsif current == 1 or current == 5
        time = time + edgeY_time
      elsif current == 3 or current == 7
        time = time + edgeX_time
      else
        time = time + turn_time
      end

      pose = allPoses[current]

      trajectory.push({:x => pose[:x], :y => pose[:y], :yaw => pose[:yaw], :time => time})

      if current > 7
        current = 0
      else
        current = current + 1
      end
    end

    # repeat first
    if start == 1 || start == 5
      time = time + edgeY_time
    elsif start == 3 || start == 7
      time = time + edgeX_time
    else
      time = time + turn_time
    end

    pose = allPoses[start]
    trajectory.push({:x => pose[:x], :y => pose[:y], :yaw => pose[:yaw], :time => time})

    return trajectory
  end

  # Blocks
  block_size = 100

  blocks =
  [
    {:minX => 0, :maxX => block_size, :minY => -block_size, :maxY => 0},
    {:minX => 0, :maxX => block_size, :minY => 0,           :maxY => block_size}
  ]

  actors = Hash.new

  # walking
  #starts = [0, 1, 2, 3, 4, 5, 6, 7].shuffle
  #for i in 0..3
  #  actors["walking_"+i.to_s] = {:skin => skins.sample,
  #                               :anim => animations[3],
  #                               :traj => trajectory(blocks.sample, rand(1.5..2.5), starts[i])}
  #end

  # running
  #for i in 0..3
  #  actors["running_"+i.to_s] = {:skin => skins.sample,
  #                               :anim => animations[0],
  #                               :traj => trajectory(blocks.sample, rand(3.5..4.5), starts[i+4])}
  #end

  actors["talkingA"] = {:skin => skins[0],
                        :anim => animations[1],
                        :traj => [{:x => 5, :y => 5, :yaw => 0, :time => 0}]}
  actors["talkingB"] = {:skin => skins[1],
                        :anim => animations[2],
                        :traj => [{:x => 5, :y => 5.5, :yaw => 0, :time => 0}]}

%>


<sdf version="1.6">
  <world name="default">
    <gui>
     <camera name="user_camera">
       <pose>-61.60 -2.05 10.325 0 0.25 0</pose>
     </camera>
    </gui>
    <scene>
      <grid>false</grid>
      <origin_visual>false</origin_visual>
      <sky>
        <clouds>
          <speed>12</speed>
        </clouds>
      </sky>
    </scene>

    <!-- A global light source -->
    <light type="directional" name="sun">
      <cast_shadows>true</cast_shadows>
      <pose>0 0 1000 -0.6 -1.2 0</pose>
      <diffuse>0.8 0.8 0.8 1</diffuse>
      <specular>0.2 0.2 0.2 1</specular>
      <attenuation>
        <range>1000</range>
        <constant>0.9</constant>
        <linear>0.01</linear>
        <quadratic>0.001</quadratic>
      </attenuation>
      <direction>-0.5 0.1 -0.9</direction>
    </light>

    <!-- A ground plane -->
    <model name="large_ground_plane">
      <static>true</static>
      <link name="link">
        <collision name="collision">
          <geometry>
            <plane>
              <normal>0 0 1</normal>
              <size>200 300</size>
            </plane>
          </geometry>
          <surface>
            <friction>
              <ode>
                <mu>100</mu>
                <mu2>50</mu2>
              </ode>
            </friction>
          </surface>
        </collision>
        <visual name="visual">
          <cast_shadows>false</cast_shadows>
          <geometry>
            <plane>
              <normal>0 0 1</normal>
              <size>200 300</size>
            </plane>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <name>Gazebo/Grass</name>
            </script>
          </material>
        </visual>
      </link>
    </model>

    <%
      # Roads
      road_width = 7.4
      road_z_offset = 0.01

      road_x = [-45, -15, 15, 50, 60]
      road_y = [-100, -45, 0, 45, 100]

      count = 0

      # Along y
      for x in road_x
        count = count + 1
    %>

    <road name="road_y_<%= count %>">
      <width><%= road_width %></width>
      <point><%= x %> <%= road_y[0] - road_width * 0.5 %> <%= road_z_offset %></point>
      <point><%= x %> <%= road_y[4] + road_width * 0.5 %> <%= road_z_offset %></point>
    </road>
    <% end

      count = 0

      # Along x
      for y in road_y
        count = count + 1
    %>

    <road name="road_x_<%= count %>">
      <width><%= road_width %></width>
      <point><%= road_x[0] + road_width * 0.5 %> <%= y %> <%= road_z_offset %></point>
      <point><%= road_x[4] - road_width * 0.5 %> <%= y %> <%= road_z_offset %></point>
    </road>
    <% end %>

    <%
      # Sidewalks
      sidewalk_width = 3
      sidewalk_z_offset = 0.005

      sidewalk_y = [-5.2, 5.2]

      count = 0

      # Along x
      for y in sidewalk_y
        count = count + 1
    %>

    <road name="sidewalk_x_<%= count %>">
      <width><%= sidewalk_width %></width>
      <point><%= road_x[0] + road_width * 0.5 %> <%= y %> <%= sidewalk_z_offset %></point>
      <point><%= road_x[3] - road_width * 0.5 %> <%= y %> <%= sidewalk_z_offset %></point>

      <material>
        <script>
          <uri>file://media/materials/scripts/gazebo.material</uri>
          <name>Gazebo/Pedestrian</name>
        </script>
      </material>
    </road>
    <% end %>

    <!-- Buildings -->

    <!-- North block -->

    <include>
      <pose>84.04 57.67 0 0 0 -1.57</pose>
      <uri>model://parking_garage</uri>
    </include>

    <include>
      <pose>75.5 0 0 0 0 0</pose>
      <uri>model://fountain</uri>
    </include>

    <include>
      <pose>75.87 -101.6 0.05 0 0 1.57</pose>
      <uri>model://robocup_3Dsim_field</uri>
    </include>

    <!-- Block 0 0 -->

    <include>
      <pose>24.6 59 0 0 0 1.57</pose>
      <uri>model://fire_station</uri>
    </include>

    <!-- Block 0 1 -->

    <!-- Block 0 2 -->

    <include>
      <pose>30.35 -16 0 0 0 0</pose>
      <uri>model://office_building</uri>
    </include>

    <!-- Block 0 3 -->

    <!-- Block 1 0 -->

    <!-- Block 1 1 -->

    <include>
      <name>law_office_1</name>
      <pose>0 10 0 0 0 0</pose>
      <uri>model://law_office</uri>
    </include>

    <include>
      <name>thrift_shop_1</name>
      <pose>-7.35 10 0 0 0 0</pose>
      <uri>model://thrift_shop</uri>
    </include>

    <include>
      <name>salon_1</name>
      <pose>7.35 10 0 0 0 0</pose>
      <uri>model://salon</uri>
    </include>

    <include>
      <name>apartment_1</name>
      <pose>0 28.5 0 0 0 0</pose>
      <uri>model://apartment</uri>
    </include>

    <!-- Block 1 2 -->

    <include>
      <pose>-6.4 -9.35 0 0 0 0</pose>
      <uri>model://fast_food</uri>
    </include>

    <!-- Block 1 3 -->

    <include>
      <pose>1.62 -65.73 0 0 0 1.57</pose>
      <uri>model://grocery_store</uri>
    </include>

    <!-- Block 2 0 -->

    <include>
      <pose>-26.6 73.3 0 0 0 -1.57</pose>
      <uri>model://school</uri>
    </include>

    <!-- Block 2 1 -->

    <include>
      <pose>-24.3 11.4 0 0 0 3.14</pose>
      <uri>model://post_office</uri>
    </include>

    <!-- Block 2 2 -->

    <include>
      <name>thrift_shop_2</name>
      <pose>-22.6 -10 0 0 0 3.14</pose>
      <uri>model://thrift_shop</uri>
    </include>

    <include>
      <name>salon_2</name>
      <pose>-30.17 -10 0 0 0 3.14</pose>
      <uri>model://salon</uri>
    </include>

    <include>
      <name>law_office_2</name>
      <pose>-37.5 -10 0 0 0 3.14</pose>
      <uri>model://law_office</uri>
    </include>

    <!-- Block 2 3 -->


    <!-- Trees -->
    <%
      trees = [
        {:model => "oak_tree", :pos_x => 69, :pos_y => -16.3, :yaw => 0},
        {:model => "oak_tree", :pos_x => 89.3, :pos_y => -15.6, :yaw => 1},
        {:model => "oak_tree", :pos_x => 80, :pos_y => 5.8, :yaw => 0.5},
        {:model => "oak_tree", :pos_x => 68.5, :pos_y => 9.7, :yaw => -0.3},
        {:model => "oak_tree", :pos_x => 92, :pos_y => 10.9, :yaw => 1.57},
        {:model => "oak_tree", :pos_x => 74.5, :pos_y => -6.6, :yaw => -0.6},
        {:model => "pine_tree", :pos_x => rand(-9.2..9.2), :pos_y => rand(51.0..94.0), :yaw => rand(0.0..3.14)},
        {:model => "pine_tree", :pos_x => rand(-9.2..9.2), :pos_y => rand(51.0..94.0), :yaw => rand(0.0..3.14)},
        {:model => "pine_tree", :pos_x => rand(-9.2..9.2), :pos_y => rand(51.0..94.0), :yaw => rand(0.0..3.14)},
        {:model => "pine_tree", :pos_x => rand(-9.2..9.2), :pos_y => rand(51.0..94.0), :yaw => rand(0.0..3.14)},
        {:model => "pine_tree", :pos_x => rand(-9.2..9.2), :pos_y => rand(51.0..94.0), :yaw => rand(0.0..3.14)},
        {:model => "pine_tree", :pos_x => rand(-9.2..9.2), :pos_y => rand(51.0..94.0), :yaw => rand(0.0..3.14)},
        {:model => "pine_tree", :pos_x => rand(-9.2..9.2), :pos_y => rand(51.0..94.0), :yaw => rand(0.0..3.14)},
        {:model => "pine_tree", :pos_x => rand(-9.2..9.2), :pos_y => rand(51.0..94.0), :yaw => rand(0.0..3.14)},
      ]

      count = 0

      trees.each do |tree|
        model = tree[:model]
        pos_x = tree[:pos_x]
        pos_y = tree[:pos_y]
        yaw = tree[:yaw]
        count = count + 1
    %>
      <include>
        <name>tree_<%= count %></name>
        <pose><%= pos_x %> <%= pos_y %> 0 0 0 <%= yaw %></pose>
        <uri>model://<%= model %></uri>
      </include>
    <% end %>


    <!-- Actors -->
    <%
      actors.keys.each do |name|
        skin = actors[name][:skin]
        anim = actors[name][:anim]
        traj = actors[name][:traj]
    %>
      <actor name="<%= name  %>">
        <!-- Starting pose -->
        <pose><%= traj[0][:x] %> <%= traj[0][:y] %> 0.6 0 0 <%= traj[0][:yaw] %></pose>
        <skin>
          <filename><%= mesh_path + skin %></filename>
        </skin>
        <animation name="animation">
          <filename><%= mesh_path + anim %></filename>
          <% if traj.length > 1 %>
            <interpolate_x>true</interpolate_x>
          <% end %>
        </animation>
          <script>
            <trajectory id="0" type="animation">
              <%
                # Needs trajectory otherwise it doesn't stay at initial pose and goes to 000
                # But with a trajectory we have to get the duration right to loop nicely

                if traj.length == 1
                  front = traj.at(0)
                  front[:time] = 100

                  traj.push(front)
                end

                traj.each do |t|
                  x = t[:x]
                  y = t[:y]
                  yaw = t[:yaw]
                  time = t[:time]
              %>
                <waypoint>
                  <time><%= time %></time>
                  <pose><%= x %> <%= y %> 0 0 0 <%= yaw %></pose>
                </waypoint>
              <% end %>
            </trajectory>
          </script>
      </actor>
    <% end %>

    <!-- Vehicles -->

    <include>
      <pose>-40 -1.9 0 0 0 1.57</pose>
      <uri>model://prius_hybrid</uri>
    </include>

  </world>
</sdf>
