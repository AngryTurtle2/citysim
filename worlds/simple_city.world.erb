<?xml version="1.0" ?>

<%
  require 'matrix'

  # Simple city

  ###############################################
  #                                             #
  #              GLOBAL PARAMETERS              #
  #                                             #
  ###############################################

  # Global model count used to generate unique names
  $count = 0

  # Street level height (Z == 0 is the bottom of the ocean)
  $street_z_offset = 5.01

  # Road parameters
  road_x = [-45, -15, 45, 110, 120]
  road_y = [-100, -45, 0, 45, 100]
  road_width = 7.4
  road_z_offset = 0.01 + $street_z_offset

  # Sidewalk parameters
  sidewalk_width = 3
  sidewalk_z_offset = 0.005 + $street_z_offset
  sidewalk_horiz_offset = 5.2

  sidewalk_x =
  [
    road_x[0]+sidewalk_horiz_offset,
    road_x[1]-sidewalk_horiz_offset,
    road_x[1]+sidewalk_horiz_offset,
    road_x[2]-sidewalk_horiz_offset,
    road_x[2]+sidewalk_horiz_offset,
    road_x[3]-sidewalk_horiz_offset,
    road_x[4]+sidewalk_horiz_offset,
  ]

  sidewalk_y =
  [
    road_y[0]-sidewalk_horiz_offset,
    road_y[0]+sidewalk_horiz_offset,
    road_y[1]-sidewalk_horiz_offset,
    road_y[1]+sidewalk_horiz_offset,
    road_y[2]-sidewalk_horiz_offset,
    road_y[2]+sidewalk_horiz_offset,
    road_y[3]-sidewalk_horiz_offset,
    road_y[3]+sidewalk_horiz_offset,
    road_y[4]-sidewalk_horiz_offset,
    road_y[4]+sidewalk_horiz_offset,
  ]

  ###############################################
  #                                             #
  #                  FUNCTIONS                  #
  #                                             #
  ###############################################

  # Print a model include
  # This automatically adds $street_z_offset to vertical coordinates
  # Sets $count
  # Parameters:
  # _model: Model file (without "model://", such as "pine_tree")
  # _posX: Position X in the world
  # _posY: Position Y in the world
  # _yaw: Yaw in the world
  # _posZ: Optional position Z in the world w.r.t. street level
  def includeModel(_model, _posX, _posY, _yaw, _posZ = 0.0)
    $count += 1

    "<include>\n"\
    "      <name>" + _model + "_" + $count.to_s() + "</name>\n"\
    "      <pose>\n"\
    "      " + _posX.to_s() + "\n"\
    "      " + _posY.to_s() + "\n"\
    "      " + (_posZ + $street_z_offset).to_s() + "\n"\
    "      " + 0.to_s() + "\n"\
    "      " + 0.to_s() + "\n"\
    "      " + _yaw.to_s() + "\n"\
    "      </pose>\n"\
    "      <uri>model://" + _model + "</uri>\n"\
    "    </include>\n"
  end

  # Print an old model, optionally give it an ambient color
  # Use this for old models instead of including so we can remove <normal_map_object_space>
  # Sets $count
  # Parameters:
  # _model: Model file (without "model://", such as "house_1")
  # _posX: Position X in the world
  # _posY: Position Y in the world
  # _yaw: Yaw in the world
  # _posZ: Optional position Y in the world
  # _r: Optional red color component (0..1)
  # _g: Optional green color component (0..1)
  # _b: Optional blue color component (0..1)
  def oldModel(_model, _posX, _posY, _yaw, _posZ = 0, _r = 1, _g = 1, _b = 1)
    $count += 1

    if _model.include? "house"
      scriptName = _model.capitalize
    else
      scriptName = _model.split('_').map(&:capitalize).join('')
    end

    "<model name=\"" + _model + "_" + $count.to_s() + "\">\n"\
    "  <static>true</static>\n"\
    "  <pose>\n"\
    "    " + _posX.to_s() + "\n"\
    "    " + _posY.to_s() + "\n"\
    "    " + (_posZ + $street_z_offset).to_s() + "\n"\
    "    " + 0.to_s() + "\n"\
    "    " + 0.to_s() + "\n"\
    "    " + _yaw.to_s() + "\n"\
    "  </pose>\n"\
    "  <link name=\"link\">\n"\
    "    <collision name=\"collision\">\n"\
    "      <geometry>\n"\
    "        <mesh>\n"\
    "          <uri>model://" + _model + "/meshes/" + _model + ".dae</uri>\n"\
    "        </mesh>\n"\
    "      </geometry>\n"\
    "    </collision>\n"\
    "    <visual name=\"visual\">\n"\
    "      <geometry>\n"\
    "        <mesh>\n"\
    "          <uri>model://" + _model + "/meshes/" + _model + ".dae</uri>\n"\
    "        </mesh>\n"\
    "      </geometry>\n"\
    "      <material>\n"\
    "        <script>\n"\
    "          <uri>model://" + _model + "/materials/scripts</uri>\n"\
    "          <uri>model://" + _model + "/materials/textures</uri>\n"\
    "          <name>" + scriptName + "/Diffuse</name>\n"\
    "        </script>\n"\
    "        <ambient>\n"\
    "          " + _r.to_s() + "\n"\
    "          " + _g.to_s() + "\n"\
    "          " + _b.to_s() + "\n"\
    "          " + 1.to_s() + "\n"\
    "        </ambient>\n"\
    "      </material>\n"\
    "    </visual>\n"\
    "  </link>\n"\
    "</model>\n"
  end

  # Get a rectangular trajectory
  # Parameters:
  # _block: A rectangle, consisting of [minX, minY, maxX, maxY]
  # _speed: Speed in m/s
  # _start: (0..7)
  def getRectangularTrajectory(_block, _speed, _start)

    minX = _block[:minX]
    minY = _block[:minY]
    maxX = _block[:maxX]
    maxY = _block[:maxY]

    # Orientation
    plusX = 0
    minusX = Math::PI
    plusY = Math::PI*0.5
    minusY = -Math::PI*0.5

    margin = 5
    turn = 10

    # Time
    edgeX_length = maxX - minX - margin*2.0 - turn*2.0
    edgeX_time = edgeX_length / _speed

    edgeY_length = maxY - minY - margin*2.0 - turn*2.0
    edgeY_time = edgeY_length / _speed

    turn_time = (turn*2) / _speed

    # poses starting from min
    allPoses =
    [
      {:x => minX + margin,        :y => minY + margin + turn, :yaw => plusY},
      {:x => minX + margin,        :y => maxY - margin - turn, :yaw => plusY},
      {:x => minX + margin + turn, :y => maxY - margin,        :yaw => plusX},
      {:x => maxX - margin - turn, :y => maxY - margin,        :yaw => plusX},
      {:x => maxX - margin,        :y => maxY - margin - turn, :yaw => minusY},
      {:x => maxX - margin,        :y => minY + margin + turn, :yaw => minusY},
      {:x => maxX - margin - turn, :y => minY + margin,        :yaw => minusX},
      {:x => minX + margin + turn, :y => minY + margin,        :yaw => minusX},
      {:x => minX + margin,        :y => minY + margin + turn, :yaw => plusY},
    ]

    trajectory = Array.new

    time = 0.0
    current = _start
    for i in 0..8
      if current == _start
        time = 0.0
      elsif current == 1 or current == 5
        time = time + edgeY_time
      elsif current == 3 or current == 7
        time = time + edgeX_time
      else
        time = time + turn_time
      end

      pose = allPoses[current]

      trajectory.push({:x => pose[:x], :y => pose[:y], :yaw => pose[:yaw], :time => time})

      if current > 7
        current = 0
      else
        current = current + 1
      end
    end

    # repeat first
    if _start == 1 || _start == 5
      time = time + edgeY_time
    elsif _start == 3 || _start == 7
      time = time + edgeX_time
    else
      time = time + turn_time
    end

    pose = allPoses[_start]
    trajectory.push({:x => pose[:x], :y => pose[:y], :yaw => pose[:yaw], :time => time})

    return trajectory
  end

  # Get a straight trajectory
  # Parameters:
  # _starPt: Start point
  # _endPt: End point
  # _speed: Speed in m/s
  def getStraightTrajectory(_startPt, _endPt, _speed)

    diff = _endPt - _startPt

    # Orientation
    startYaw = diff.angle_with(Vector[1, 0])

    # FIXME: For now, reducing all paths because animation is bad otherwise
    newEndPt = Vector[_startPt[0] + diff[0] * 0.2, _startPt[1] + diff[1] * 0.2]
    _endPt = newEndPt

    # Time
    length = (_endPt - _startPt).magnitude
    oneWayTime = length / _speed

    # Trajectory
    trajectory =
    [
      {:x => _startPt[0],        :y => _startPt[1], :yaw => startYaw, :time => 0},
      {:x => _endPt[0],          :y => _endPt[1],   :yaw => startYaw, :time => oneWayTime},
      {:x => _endPt[0],          :y => _endPt[1],   :yaw => startYaw + Math::PI, :time => oneWayTime * 1.1},
      {:x => _startPt[0],        :y => _startPt[1], :yaw => startYaw + Math::PI, :time => oneWayTime * 2},
      {:x => _startPt[0],        :y => _startPt[1], :yaw => startYaw, :time => oneWayTime * 2.1},
    ]

    return trajectory
  end

  # Actor meshes
  skins =
  [
    "SKIN_man_blue_shirt.dae",
    "SKIN_man_green_shirt.dae",
    "SKIN_man_red_shirt.dae"
  ]

  animations =
  [
    "ANIMATION_running.dae",
    "ANIMATION_talking_a.dae",
    "ANIMATION_talking_b.dae",
    "ANIMATION_walking.dae"
  ]

  # Blocks for pedestrian rectangular trajectories
  blocks = []
  (0..2).step(1) do |x|
    (0..3).step(1) do |y|
      blocks.push({:minX => road_x[x], :maxX => road_x[x+1], :minY => road_y[y], :maxY => road_y[y+1]})
    end
  end

  # Street segments for pedestrian straight trajectories
  # Note: These are not covering all sidewalks
  sidewalkSegs = []
  (0..4).step(2) do |x|
    (1..7).step(2) do |y|
      sidewalkSegs.push({:start => Vector[sidewalk_x[x], sidewalk_y[y]], :end => Vector[sidewalk_x[x], sidewalk_y[y+1]]})
      sidewalkSegs.push({:start => Vector[sidewalk_x[x], sidewalk_y[y]], :end => Vector[sidewalk_x[x+1], sidewalk_y[y]]})
      sidewalkSegs.push({:start => Vector[sidewalk_x[x+1], sidewalk_y[y]], :end => Vector[sidewalk_x[x], sidewalk_y[y]]})
      sidewalkSegs.push({:start => Vector[sidewalk_x[x+1], sidewalk_y[y+1]], :end => Vector[sidewalk_x[x], sidewalk_y[y+1]]})
      sidewalkSegs.push({:start => Vector[sidewalk_x[x], sidewalk_y[y+1]], :end => Vector[sidewalk_x[x+1], sidewalk_y[y+1]]})
    end
  end

  actors = Hash.new

  # walking
  for i in 0..5
    seg = sidewalkSegs.delete sidewalkSegs.sample
    actors["walking_"+i.to_s] = {:skin => skins.sample,
                                 :anim => animations[3],
                                 :traj => getStraightTrajectory(seg[:start], seg[:end], rand(1.5..2.5))}
  end

  # running
  for i in 0..5
    seg = sidewalkSegs.delete sidewalkSegs.sample
    actors["running_"+i.to_s] = {:skin => skins.sample,
                                 :anim => animations[0],
                                 :traj => getStraightTrajectory(seg[:start], seg[:end], rand(3.5..4.5))}
  end

  actors["talkingA"] = {:skin => skins[0],
                        :anim => animations[1],
                        :traj => [{:x => 5, :y => 5, :yaw => 0, :time => 0}]}
  actors["talkingB"] = {:skin => skins[1],
                        :anim => animations[2],
                        :traj => [{:x => 5, :y => 5.5, :yaw => 0, :time => 0}]}

%>


<sdf version="1.6">
  <world name="default">
    <gui>
     <camera name="user_camera">
       <pose>-49.08 -1.911 6.95 0 0 -0.0159</pose>
     </camera>
    </gui>
    <scene>
      <grid>false</grid>
      <origin_visual>false</origin_visual>
      <ambient>0.54 0.558 0.4218 1</ambient>
      <sky>
        <clouds>
          <speed>12</speed>
        </clouds>
      </sky>
    </scene>

    <!-- A global light source -->
    <light type="directional" name="sun">
      <cast_shadows>true</cast_shadows>
      <pose>0 0 1000 -0.6 -1.2 0</pose>
      <diffuse>0.8 0.8 0.8 1</diffuse>
      <specular>0.2 0.2 0.2 1</specular>
      <attenuation>
        <range>1000</range>
        <constant>0.9</constant>
        <linear>0.01</linear>
        <quadratic>0.001</quadratic>
      </attenuation>
      <direction>-0.5 0.1 -0.9</direction>
    </light>

    <!-- Environment -->
    <%= includeModel("city_terrain", 0, 0, 0) %>
    <%= includeModel("ocean", 40, -20, 0, 3 - $street_z_offset) %>

    <%
      # Roads
      count = 0

      # Along y
      for x in road_x
        count = count + 1
    %>

    <road name="road_y_<%= count %>">
      <width><%= road_width %></width>
      <point><%= x %> <%= road_y[0] - road_width * 0.5 %> <%= road_z_offset %></point>
      <point><%= x %> <%= road_y[4] + road_width * 0.5 %> <%= road_z_offset %></point>
    </road>
    <% end

      count = 0

      # Along x
      for y in road_y
        count = count + 1
    %>

    <road name="road_x_<%= count %>">
      <width><%= road_width %></width>
      <point><%= road_x[0] + road_width * 0.5 %> <%= y %> <%= road_z_offset %></point>
      <point><%= road_x[4] - road_width * 0.5 %> <%= y %> <%= road_z_offset %></point>
    </road>
    <% end %>

    <%
      # Sidewalks

      count = 0

      # Along y
      for x in sidewalk_x
        count = count + 1
    %>

    <road name="sidewalk_y_<%= count %>">
      <width><%= sidewalk_width %></width>
      <point><%= x %> <%= road_y[0] - road_width * 0.5 %> <%= sidewalk_z_offset %></point>
      <point><%= x %> <%= road_y[4] + road_width * 0.5 %> <%= sidewalk_z_offset %></point>

      <material>
        <script>
          <uri>file://media/materials/scripts/gazebo.material</uri>
          <name>Gazebo/Pedestrian</name>
        </script>
      </material>
    </road>
    <% end

      count = 0


      # Along x
      for y in sidewalk_y
        count = count + 1
    %>

    <road name="sidewalk_x_<%= count %>">
      <width><%= sidewalk_width %></width>
      <point><%= road_x[0] + road_width * 0.5 %> <%= y %> <%= sidewalk_z_offset %></point>
      <point><%= road_x[3] - road_width * 0.5 %> <%= y %> <%= sidewalk_z_offset %></point>

      <material>
        <script>
          <uri>file://media/materials/scripts/gazebo.material</uri>
          <name>Gazebo/Pedestrian</name>
        </script>
      </material>
    </road>
    <% end %>

    <!-- Buildings -->

    <!-- North block -->

    <%= includeModel("parking_garage", 146.778, 57.67, -1.57) %>
    <%= includeModel("fountain", 135.5, 0, 0) %>

    <%= includeModel("oak_tree", 129, -16.3, rand(0.0..3.14)) %>
    <%= includeModel("oak_tree", 149.3, -15.6, rand(0.0..3.14)) %>
    <%= includeModel("oak_tree", 140, 5.8, rand(0.0..3.14)) %>
    <%= includeModel("oak_tree", 128.5, 9.7, rand(0.0..3.14)) %>
    <%= includeModel("oak_tree", 152, 10.9, rand(0.0..3.14)) %>
    <%= includeModel("oak_tree", 134.5, -6.6, rand(0.0..3.14)) %>

    <%= includeModel("robocup_3Dsim_field", 138.5, -86.6, 1.57, 0.05) %>

    <!-- North road -->

    <%= includeModel("pine_tree", (road_x[3] + road_x[4]) * 0.5, 93, rand(0.0..3.14)) %>
    <%= includeModel("pine_tree", (road_x[3] + road_x[4]) * 0.5, 81, rand(0.0..3.14)) %>
    <%= includeModel("pine_tree", (road_x[3] + road_x[4]) * 0.5, 69, rand(0.0..3.14)) %>
    <%= includeModel("pine_tree", (road_x[3] + road_x[4]) * 0.5, 57, rand(0.0..3.14)) %>

    <!-- Block 0 0 -->

    <%= includeModel("fire_station", 56.84, 61.56, 1.57) %>

    <%= oldModel("house_2", 65.4415, 54.097, 0) %>
    <%= oldModel("house_3", 75.734, 53.01, 0) %>

    <!-- Block 0 1 -->

    <%= oldModel("house_1", 97.28, 12.598, 0) %>
    <%= oldModel("house_1", 85.28, 12.598, 0, 0, 0.8, 1, 0.8) %>
    <%= oldModel("house_1", 73.28, 12.598, 0, 0, 1, 0.8, 0.8) %>
    <%= oldModel("house_1", 61.28, 12.598, 0, 0, 0.8, 0.8, 1) %>

    <!-- Block 0 2 -->

    <%= includeModel("office_building", 60.19, -15.294, 0) %>

    <!-- Block 0 3 -->

    <%= oldModel("gas_station", 61.88, -75.82, 3.14) %>
    <%= includeModel("asphalt_plane", 61.581, -61.664, 0) %>

    <!-- Block 1 0 -->

    <%= includeModel("pine_tree", rand(-7.4..36.35), rand(53.3..91.8), rand(0.0..3.14)) %>
    <%= includeModel("pine_tree", rand(-7.4..36.35), rand(53.3..91.8), rand(0.0..3.14)) %>
    <%= includeModel("pine_tree", rand(-7.4..36.35), rand(53.3..91.8), rand(0.0..3.14)) %>
    <%= includeModel("pine_tree", rand(-7.4..36.35), rand(53.3..91.8), rand(0.0..3.14)) %>
    <%= includeModel("pine_tree", rand(-7.4..36.35), rand(53.3..91.8), rand(0.0..3.14)) %>
    <%= includeModel("pine_tree", rand(-7.4..36.35), rand(53.3..91.8), rand(0.0..3.14)) %>
    <%= includeModel("pine_tree", rand(-7.4..36.35), rand(53.3..91.8), rand(0.0..3.14)) %>
    <%= includeModel("pine_tree", rand(-7.4..36.35), rand(53.3..91.8), rand(0.0..3.14)) %>
    <%= includeModel("pine_tree", rand(-7.4..36.35), rand(53.3..91.8), rand(0.0..3.14)) %>
    <%= includeModel("pine_tree", rand(-7.4..36.35), rand(53.3..91.8), rand(0.0..3.14)) %>
    <%= includeModel("pine_tree", rand(-7.4..36.35), rand(53.3..91.8), rand(0.0..3.14)) %>
    <%= includeModel("pine_tree", rand(-7.4..36.35), rand(53.3..91.8), rand(0.0..3.14)) %>
    <%= includeModel("pine_tree", rand(-7.4..36.35), rand(53.3..91.8), rand(0.0..3.14)) %>
    <%= includeModel("pine_tree", rand(-7.4..36.35), rand(53.3..91.8), rand(0.0..3.14)) %>
    <%= includeModel("pine_tree", rand(-7.4..36.35), rand(53.3..91.8), rand(0.0..3.14)) %>
    <%= includeModel("pine_tree", rand(-7.4..36.35), rand(53.3..91.8), rand(0.0..3.14)) %>
    <%= includeModel("pine_tree", rand(-7.4..36.35), rand(53.3..91.8), rand(0.0..3.14)) %>

    <!-- Block 1 1 -->

    <%= includeModel("law_office", 8.47, 9.356, 0) %>
    <%= includeModel("thrift_shop", 1.35, 9.356, 0) %>
    <%= includeModel("salon", 15.7, 9.356, 0) %>
    <%= includeModel("oak_tree", -6.418, 10.37, 0.55) %>
    <%= includeModel("apartment", 1.573, 27.565, 0) %>
    <%= includeModel("osrf_first_office", 27.003, 20.15, 1.57) %>

    <!-- Block 1 2 -->

    <%= oldModel("fast_food", -3.73, -9.08, 0, 1.57965648) %>

    <!-- Block 1 3 -->

    <%= includeModel("grocery_store", 4.12, -67.758, 1.57) %>

    <!-- Block 2 0 -->

    <%= includeModel("school", -27.309, 67.823, -1.57) %>
    <%= includeModel("oak_tree", -28.916, 89.604, -0.51) %>
    <%= includeModel("oak_tree", -34.077, 89.854, 0.51) %>

    <!-- Block 2 1 -->

    <%= includeModel("post_office", -26.686, 11.119, 3.14) %>
    <%= includeModel("pine_tree", -30.709, 7.15, rand(0.0..3.14)) %>

    <!-- Block 2 2 -->

    <%= includeModel("salon", -27.65, -9.35, 3.14) %>
    <%= includeModel("law_office", -34.886, -9.408, 3.14) %>

    <!-- Block 2 3 -->

    <%= includeModel("police_station", -31.838, -59.696, 0) %>
    <%= includeModel("collapsed_industrial", -29.8725, -83.9104, 1.5708) %>
    <%= includeModel("construction_cone", -40.748, -90.1868, rand(0.0..3.14)) %>

    <%= includeModel("construction_cone", -40.692, -95.2899, rand(0.0..3.14)) %>
    <%= includeModel("construction_cone", -37.8997, -95.3521, rand(0.0..3.14)) %>
    <%= includeModel("construction_cone", -35.2603, -95.3721, rand(0.0..3.14)) %>
    <%= includeModel("construction_cone", -31.8118, -95.4314, rand(0.0..3.14)) %>
    <%= includeModel("construction_cone", -40.1918, -74.491, rand(0.0..3.14)) %>
    <%= includeModel("construction_cone", -40.6878, -80.629, rand(0.0..3.14)) %>

    <%= includeModel("cinder_block", rand(-39.77..-35.209), rand(-93.948..-87.66), rand(0.0..3.14)) %>
    <%= includeModel("cinder_block", rand(-39.77..-35.209), rand(-93.948..-87.66), rand(0.0..3.14)) %>
    <%= includeModel("cinder_block", rand(-39.77..-35.209), rand(-93.948..-87.66), rand(0.0..3.14)) %>
    <%= includeModel("cinder_block", rand(-39.77..-35.209), rand(-93.948..-87.66), rand(0.0..3.14)) %>
    <%= includeModel("cinder_block", rand(-39.77..-35.209), rand(-93.948..-87.66), rand(0.0..3.14)) %>
    <%= includeModel("cinder_block", rand(-39.77..-35.209), rand(-93.948..-87.66), rand(0.0..3.14)) %>
    <%= includeModel("cinder_block_2", rand(-39.77..-35.209), rand(-93.948..-87.66), rand(0.0..3.14)) %>
    <%= includeModel("cinder_block_2", rand(-39.77..-35.209), rand(-93.948..-87.66), rand(0.0..3.14)) %>
    <%= includeModel("cinder_block_2", rand(-39.77..-35.209), rand(-93.948..-87.66), rand(0.0..3.14)) %>
    <%= includeModel("cinder_block_2", rand(-39.77..-35.209), rand(-93.948..-87.66), rand(0.0..3.14)) %>
    <%= includeModel("cinder_block_2", rand(-39.77..-35.209), rand(-93.948..-87.66), rand(0.0..3.14)) %>

    <!-- West block -->

    <!-- East block -->

    <%= includeModel("powerplant", -6.09, -134.33, 3.14) %>

    <!-- Construction zone -->

    <%= includeModel("tower_crane", -46.2805, -101.493, 1.60214) %>
    <%= includeModel("drc_practice_angled_barrier_45", -37.2216, -100.588, 3.14159) %>
    <%= includeModel("drc_practice_orange_jersey_barrier", -34.8405, -101.725, 0.867273) %>
    <%= includeModel("construction_barrel", -47.7276, -90.7959, 0) %>

    <!-- South island -->

    <%= includeModel("truss_bridge", -56.37, -45, 1.57, -0.29) %>
    <%= includeModel("truss_bridge", -56.37, 0, 1.57, -0.29) %>

    <road name="sandy_path">
      <width>7.9</width>
      <point>-68 <%= -45 - road_width * 0.4 %> <%= road_z_offset %></point>
      <point>-68 <%= road_width * 0.4 %> <%= road_z_offset %></point>

      <material>
        <script>
          <uri>file://media/materials/scripts/gazebo.material</uri>
          <name>Gazebo/Residential</name>
        </script>
      </material>
    </road>

    <!-- Stop lights -->

    <%= includeModel("stop_light_post", road_x[1] + road_width * 0.5, -road_width * 0.5, -1.57) %>

    <%= includeModel("stop_light_post", road_x[2] + road_width * 0.5, -road_width * 0.5, -1.57) %>
    <%= includeModel("stop_light_post", road_x[4] + road_width * 0.5, -road_width * 0.5, -1.57) %>
    <%= includeModel("stop_light_post", road_x[0] - road_width * 0.5, +road_width * 0.5, 1.57) %>
    <%= includeModel("stop_light_post", road_x[1] - road_width * 0.5, +road_width * 0.5, 1.57) %>
    <%= includeModel("stop_light_post", road_x[2] - road_width * 0.5, +road_width * 0.5, 1.57) %>
    <%= includeModel("stop_light_post", road_x[0] + road_width * 0.5, +road_width * 0.5, 0.0) %>
    <%= includeModel("stop_light_post", road_x[1] + road_width * 0.5, +road_width * 0.5, 0.0) %>
    <%= includeModel("stop_light_post", road_x[2] + road_width * 0.5, +road_width * 0.5, 0.0) %>
    <%= includeModel("stop_light_post", road_x[4] + road_width * 0.5, +road_width * 0.5, 0.0) %>
    <%= includeModel("stop_light_post", road_x[0] - road_width * 0.5, -road_width * 0.5, 3.14) %>
    <%= includeModel("stop_light_post", road_x[1] - road_width * 0.5, -road_width * 0.5, 3.14) %>
    <%= includeModel("stop_light_post", road_x[2] - road_width * 0.5, -road_width * 0.5, 3.14) %>
    <%= includeModel("stop_light_post", road_x[3] - road_width * 0.5, -road_width * 0.5, 3.14) %>

    <!-- Stop signs -->

    <%= includeModel("stop_sign", road_x[0] + road_width * 0.5, road_y[1]+road_width * 0.5, 1.57) %>
    <%= includeModel("stop_sign", road_x[1] + road_width * 0.5, road_y[1]+road_width * 0.5, 1.57) %>
    <%= includeModel("stop_sign", road_x[2] + road_width * 0.5, road_y[1]+road_width * 0.5, 1.57) %>
    <%= includeModel("stop_sign", road_x[0] + road_width * 0.5, road_y[3]+road_width * 0.5, 1.57) %>
    <%= includeModel("stop_sign", road_x[1] + road_width * 0.5, road_y[3]+road_width * 0.5, 1.57) %>
    <%= includeModel("stop_sign", road_x[2] + road_width * 0.5, road_y[3]+road_width * 0.5, 1.57) %>
    <%= includeModel("stop_sign", road_x[1] + road_width * 0.5, road_y[1]-road_width * 0.5, 0.0) %>
    <%= includeModel("stop_sign", road_x[1] + road_width * 0.5, road_y[3]-road_width * 0.5, 0.0) %>
    <%= includeModel("stop_sign", road_x[1] + road_width * 0.5, road_y[4]-road_width * 0.5, 0.0) %>
    <%= includeModel("stop_sign", road_x[2] + road_width * 0.5, road_y[1]-road_width * 0.5, 0.0) %>
    <%= includeModel("stop_sign", road_x[2] + road_width * 0.5, road_y[3]-road_width * 0.5, 0.0) %>
    <%= includeModel("stop_sign", road_x[2] + road_width * 0.5, road_y[4]-road_width * 0.5, 0.0) %>
    <%= includeModel("stop_sign", road_x[1] - road_width * 0.5, road_y[0]+road_width * 0.5, 3.14) %>
    <%= includeModel("stop_sign", road_x[1] - road_width * 0.5, road_y[1]+road_width * 0.5, 3.14) %>
    <%= includeModel("stop_sign", road_x[1] - road_width * 0.5, road_y[3]+road_width * 0.5, 3.14) %>
    <%= includeModel("stop_sign", road_x[2] - road_width * 0.5, road_y[0]+road_width * 0.5, 3.14) %>
    <%= includeModel("stop_sign", road_x[2] - road_width * 0.5, road_y[1]+road_width * 0.5, 3.14) %>
    <%= includeModel("stop_sign", road_x[2] - road_width * 0.5, road_y[3]+road_width * 0.5, 3.14) %>
    <%= includeModel("stop_sign", road_x[1] - road_width * 0.5, road_y[1]-road_width * 0.5, -1.57) %>
    <%= includeModel("stop_sign", road_x[1] - road_width * 0.5, road_y[3]-road_width * 0.5, -1.57) %>
    <%= includeModel("stop_sign", road_x[2] - road_width * 0.5, road_y[1]-road_width * 0.5, -1.57) %>
    <%= includeModel("stop_sign", road_x[2] - road_width * 0.5, road_y[3]-road_width * 0.5, -1.57) %>
    <%= includeModel("stop_sign", road_x[3] - road_width * 0.5, road_y[1]-road_width * 0.5, -1.57) %>
    <%= includeModel("stop_sign", road_x[3] - road_width * 0.5, road_y[3]-road_width * 0.5, -1.57) %>

    <!-- Actors -->
    <%
      actors.keys.each do |name|
        skin = actors[name][:skin]
        anim = actors[name][:anim]
        traj = actors[name][:traj]
    %>
      <actor name="<%= name  %>">
        <!-- Starting pose -->
        <pose><%= traj[0][:x] %> <%= traj[0][:y] %> <%= 0.6 + $street_z_offset %> 0 0 <%= traj[0][:yaw] %></pose>
        <skin>
          <filename>model://actor/meshes/<%= skin %></filename>
        </skin>
        <animation name="animation">
          <filename>model://actor/meshes/<%= anim %></filename>
          <% if traj.length > 1 %>
            <interpolate_x>true</interpolate_x>
          <% end %>
        </animation>
          <script>
            <trajectory id="0" type="animation">
              <%
                # Needs trajectory otherwise it doesn't stay at initial pose and goes to 000
                # But with a trajectory we have to get the duration right to loop nicely

                if traj.length == 1
                  front = traj.at(0)
                  front[:time] = 100

                  traj.push(front)
                end

                traj.each do |t|
                  x = t[:x]
                  y = t[:y]
                  yaw = t[:yaw]
                  time = t[:time]
              %>
                <waypoint>
                  <time><%= time %></time>
                  <pose><%= x %> <%= y %> <%= $street_z_offset %> 0 0 <%= yaw %></pose>
                </waypoint>
              <% end %>
            </trajectory>
          </script>
      </actor>
    <% end %>

    <!-- Vehicles -->

    <%= includeModel("prius_hybrid", -40, -1.9, 1.57) %>

  </world>
</sdf>
